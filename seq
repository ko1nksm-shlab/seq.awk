#!/bin/sh

set -eu

seq() {
  awk '
    function abort(s) {
      print "seq: " s > "/dev/stderr"
      exit 1
    }

    function hex2dec(v,  a, b, i, l, h) {
      h = "0123456789abcdef"
      if ((i = index(v, ".")) > 0) {
        b = substr(v, 1, i - 1); a = substr(v, i + 1)
      } else {
        b = v; a = ""
      }
      v = 0; l = length(b)
      for (i = 1; i <= l; i++) {
        v = v * 16 + (index(h, substr(b, i, 1)) - 1)
      }
      l = length(a)
      for (i = 1; i <= l; i++) {
        v += (16 ^ -i) * (index(h, substr(a, i, 1)) - 1)
      }
      return v
    }

    function strtod(v, i) {
      v = tolower(v)
      if (match(v, /^[-+]?([0-9]+|[0-9]*\.[0-9]+)$/)) {
        # do nothing
      } else if (match(v, /^([0-9]+e[+-][0-9]+|[0-9]*\.[0-9]+e[+-][0-9]+)$/)) {
        i = index(v, "e")
        v = substr(v, 1, i - 1) * 10 ^ substr(v, i + 1)
      } else if (match(v, /^0x[0-9a-f]+$/)) {
        v = hex2dec(substr(v, 3))
      } else if (match(v, /^0x([0-9a-f]+p[+-][0-9]+|[0-9a-f]*\.[0-9a-f]+p[+-][0-9]+)$/)) {
        i = index(v, "p")
        v = hex2dec(substr(v, 3, i - 3)) * 2 ^ substr(v, i + 1)
      } else {
        return ""
      }
      return (v + 0) ""
    }

    function parse_double(v) {
      if ((r = strtod(v)) != "") return r
      abort("invalid floating point argument: " v)
      exit 1
    }

    function check_format(format,  str, count) {
      str = format; count = 0
      while (length(str) > 0) {
        if (match(str, /[^%]+|%%|%[ +\047#-]*[0-9]*\.?[0-9]*./)) {
          chunk = substr(str, RSTART, RLENGTH)
          str = substr(str, RSTART + RLENGTH)
          if (match(chunk, /^%%$|^[^%]/)) continue
          count++
          if (match(chunk, /^%.*[aAeEfFgG]$/)) continue
        }
        count = str = ""
      }
      if (count == 1) return
      abort("invalid format string: " format)
    }

    function max(v1, v2) {
      return v1 > v2 ? v1 : v2
    }

    function gen_width(first, incr, last,  b, a, i) {
      b = 0; a = 0
      if (index(first += 0, ".") == 0) first = first "."
      if (index(incrt += 0, ".") == 0) incr = incr "."
      if (index(last += 0, ".") == 0) last = last "."
      i = index(first, "."); b = max(b, i - 1); a = max(a, length(first) - i - 1)
      i = index(incr, ".");  b = max(b, i - 1); a = max(a, length(incr) - i - 1)
      i = index(last, ".");  b = max(b, i - 1)
      return "0" (a > 0 ? (b + a + 1) "." a : b ".0")
    }

    BEGIN {
     usage = "usage: seq [-w] [-f format] [first [incr]] last"
     format = "%g"; width = 0

      i = 1
      while (i < ARGC && match(argv = ARGV[i], /^-.*/)) {
        if(sub(/^-w/, "", argv)) {
          width = 1
        } else if(sub(/^-f/, "", argv)) {
          format = length(argv) == 0 ? ARGV[++i] : argv
          argv = ""
        } else {
          argv = substr(argv, 1, 2)
          abort("unrecognized option: " argv "\n" usage)
        }
        if (length(argv) == 0) {
          i++
        } else {
          ARGV[i] = "-" argv
        }
      }

      len = ARGC - i
      if (len == 1) {
        first = incr = 1; last = ARGV[i]
      } else if (len == 2) {
        first = ARGV[i]; incr = 1; last = ARGV[++i]
      } else if (len == 3) {
        first = ARGV[i]; incr = ARGV[++i]; last = ARGV[++i]
      } else {
        print usage > "/dev/stderr"
        exit 1
      }

      first = parse_double(first)
      incr = parse_double(incr)
      last = parse_double(last)

      if (incr == 0) abort("invalid Zero increment value: " incr)
      n = int((last - first) / incr)

      if (width > 0) {
        width = gen_width(first, incr, first + incr * n)
        format = "%" width "f"
      } else {
        check_format(format)
      }

      for (i = 0; i <= n; i++) {
        printf format "\n", first + incr * i
      }
    }
  ' "$@"
}

seq "$@"
